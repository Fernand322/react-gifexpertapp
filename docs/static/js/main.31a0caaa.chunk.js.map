{"version":3,"sources":["Components/AddCategory.js","helpers/getGifs.js","Components/GifGridItem.js","Components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setcategorias","useState","inputvalue","setinputvalue","onSubmit","e","preventDefault","trim","length","cate","type","value","onChange","target","getGif","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","setTimeout","useFetchGifs","GifExportApp","categorias","class","ReactDOM","render","document","getElementById"],"mappings":"mMAEaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAETC,mBAAS,IAFA,mBAErCC,EAFqC,KAE1BC,EAF0B,KAkB5C,OAGI,sBAAMC,SAZW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACrCN,EAAc,MAQlB,SACI,uBACAO,KAAK,OACLC,MAAOT,EACPU,SArBkB,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCPlBG,EAAM,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACZC,EADY,iDACqCC,UAAUH,GAD/C,8DAECI,MAAMF,GAFP,cAEZG,EAFY,gBAGEA,EAAKC,OAHP,uBAGXC,EAHW,EAGXA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GACnB,MAAM,CACNC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QATlB,kBAaXM,GAbW,4CAAH,sDCENO,EAAc,SAAC,GAAoB,IAAnBJ,EAAkB,EAAlBA,GAAGC,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAElC,OADCc,QAAQC,IAAIN,EAAIC,EAAMV,GAEnB,sBAAKgB,UAAU,yCAAf,UACE,qBAAKC,IAAKjB,EAAKkB,IAAKR,IACpB,4BAAIA,QCFDS,EAAU,SAAC,GAAgB,IAAfrB,EAAc,EAAdA,SAAc,ECDX,SAACA,GAAc,IAAD,EAEZd,mBAAS,CAC/BqB,KAAM,GACNe,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAwBtC,OAhBAC,qBAAU,WACN1B,EAAOC,GACN0B,MAAK,SAAAC,GAEFC,YAAW,WACPJ,EAAS,CACLjB,KAAMoB,EACNL,SAAS,MAGd,UAGT,CAACtB,IAGIuB,EDbsBM,CAAa7B,GAA9Ba,EAVuB,EAU5BN,KAAYe,EAVgB,EAUhBA,QACnB,OACI,qCACA,6BAAKtB,IAEJsB,GAAW,mBAAGJ,UAAY,sCAAf,wBAEV,qBAAMA,UAAU,YAAhB,SAKUL,EAAOJ,KAAI,SAAAC,GAAG,OAGZ,aAFF,CAEG,EAAD,eAEIA,GADEA,EAAIC,aE3BnBmB,EAAe,WAAM,MAGM5C,mBAAS,CAAC,mBAHhB,mBAGvB6C,EAHuB,KAGX9C,EAHW,KAU9B,OAEO,qCACA,oBAAI+C,MAAM,SAAV,0BACA,cAAC,EAAD,CAAa/C,cAAiBA,IAC9B,uBAEA,6BAEQ8C,EAAWtB,KAAI,SAAAT,GAAQ,OACtB,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MCjBlCiC,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.31a0caaa.chunk.js","sourcesContent":["import React, {useState} from 'react'\nimport PropTypes from 'prop-types';\nexport const AddCategory = ({setcategorias}) => {\n\n    const [inputvalue,setinputvalue] = useState('');\n\n    const handleInputChange = (e)=>{\n        setinputvalue(e.target.value);\n        //console.log(inputvalue);\n    }\n\n    const handleSubmit = (e)=>{\n        e.preventDefault(); //permite prevenir el refresh completo de la pag. Comportamiento por default.\n        if (inputvalue.trim().length > 2) {\n            setcategorias(cate => [inputvalue,...cate]);\n            setinputvalue('');    \n        }\n        \n\n    }\n    return (\n    \n        \n        <form onSubmit={handleSubmit}>\n            <input \n            type=\"text\"\n            value={inputvalue}\n            onChange={handleInputChange}\n            />\n            \n        </form>\n    )\n    AddCategory.propTypes={\n        setcategorias: PropTypes.func.isRequired //De esta manera se obliga a utilizar la funcion setcategorias.\n    }\n}\n","export const getGif = async(category)=>{\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=6&api_key=sUmoVEYiXccSUE0d9MGxkCytSYkm8z5j`;\n    const resp = await fetch(url);\n    const {data}= await resp.json();\n   //En esta const se guarda un arreglo con todos los resultados retornados de data a travez del metodo map()\n    const gifs = data.map(img => {\n       return{\n       id: img.id,\n       title: img.title,\n       url: img.images.downsized_medium.url\n        }\n    })\n   \n    return(gifs);\n    \n}","import React from 'react'\n\nexport const GifGridItem = ({id,title,url}) => {// De esta manera permite traer todos los componentes o props de manera separada.\n     console.log(id, title,url); // mucho mas facil de leer las prop.\n    return (\n        <div className=\"card animate__animated animate__bounce\">\n          <img src={url} alt={title}/>\n          <p>{title}</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { getGif } from '../helpers/getGifs';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({category}) => {\n   // const [images, setimages] = useState([]);\n   ////UseEffect permite que react no haga petiociones repetidas cuando surge algun cambio en la pagina. \n   // useEffect(()=>{\n   //     getGif(category).then( setimages) \n   // },[category])//los corchetes permite que este codigo solo se ejecute una vez, cuando el componente es renderizado por primera vez.\n   // //Metodo getGif permite traer todas las imagenes de la API por medio de una funcion async\n    \n    //getGif();\n    //data:images es para desestructurar asi poder utilziar solo el nombre 'images'.\n    const {data:images,loading}= useFetchGifs(category);\n    return (\n        <>\n        <h3>{category}</h3>\n\n        {loading && <p className=  \"p animate__animated animate__shakeX\" >Loading...</p> }\n        \n        { < div className=\"card-grid\">\n         \n           \n               {\n                   //images.map(({id,title}) => ( //De esta manera se hace la destructuracion del elemento img o la variable iteradora. Para que sea mas simple\n                    images.map(img => (\n                    //console.log(img.id);\n                      //<li key={ id }> {title} </li>\n                      <GifGridItem \n                      key= {img.id}\n                      {...img} />\n                      \n                   ))\n               }\n               \n           \n        </div> }\n        </>\n    )\n}\n","import { useState, useEffect } from 'react'\nimport { getGif } from '../helpers/getGifs';\n\n\nexport const useFetchGifs = (category) => {\n\n    const [state, setstate] = useState({\n        data: [],\n        loading: true\n    });\n    \n    \n    useEffect(()=>{\n        getGif(category)\n        .then(imgs =>{ \n            \n            setTimeout(() => {\n                setstate({\n                    data: imgs,\n                    loading: false\n                    }\n                )    \n            }, 3000);    \n            \n    }) \n    },[category])\n\n\n    return state;\n    \n}\n","import React, {useState} from 'react'\nimport { AddCategory } from './Components/AddCategory';\nimport { GifGrid } from './Components/GifGrid';\n\nexport const GifExportApp = () => {\n   // const categorias = ['Autos', 'Motos', 'Bicicletas']; Esto no se hace menos que los elementos de la lista nunca cambien como por ejemplo un menu.\n\n    const [categorias, setcategorias] = useState(['Rick and Morty']);\n    \n    const handleAdd = ()=>{\n        setcategorias([...categorias,'hola']);// una posible solucion.\n        \n    }\n    \n    return (\n        \n           <>\n           <h2 class=\"titulo\">GifExpertApp</h2>\n           <AddCategory setcategorias = {setcategorias} />\n           <hr />\n           \n           <ol>\n               {\n                   categorias.map(category =>\n                    <GifGrid key={category} category={category} />\n                    //<li key={category}>{category}</li> //La key es utilizada por react para saber que elemento esta iterando.\n\n                   )\n               }\n           </ol>\n           \n           \n           </> \n        \n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExportApp } from './GifExpertApp';\nimport './index.css';\n\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  \n    <GifExportApp />\n  ,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}